#!/usr/bin/env python

# find events that are detected but not predicted, a.k.a. false negatives
 
# misses <detected-and-predicted-csv-files>

# e.g.
# misses `pwd`/groundtruth-data/round2/20161207T102314_ch1_p1-detected.csv `pwd`/groundtruth-data/round2/20161207T102314_ch1_p1-predicted-2.0pr.csv

import os
import sys
import numpy as np
import csv
from itertools import cycle
from datetime import datetime
import socket

from lib import *

_, repodir, _ = get_srcrepobindirs()

print(str(datetime.now())+": start time")
with open(os.path.join(repodir, "VERSION.txt"), 'r') as fid:
  print('SongExplorer version = '+fid.read().strip().replace('\n',', '))
print("hostname = "+socket.gethostname())

try:

  csv_files = sys.argv[1].split(',')
  print('csv_files: '+str(csv_files))

  detected_events = {}
  predicted_events = {}
  for csv_file in csv_files:
    with open(csv_file) as fid:
      csvreader = csv.reader(fid)
      unused_rows = False
      for row in csvreader:
        if row[3]=='detected':
          if row[0] not in detected_events:
            detected_events[row[0]] = []
          if row[0] not in predicted_events:
            predicted_events[row[0]] = []
          detected_events[row[0]].append(row)
        elif row[3]=='predicted':
          if row[0] not in predicted_events:
            predicted_events[row[0]] = []
          if row[0] not in detected_events:
            detected_events[row[0]] = []
          predicted_events[row[0]].append(row)
        else:
          unused_rows = True
      if unused_rows:
        print("WARNING: "+csv_file+" has some rows which are neither detected nor predicted events")

  if detected_events.keys() != predicted_events.keys():
    d_not_p = set(detected_events.keys()) - set(predicted_events.keys())
    if len(d_not_p)>0:
      print("WARNING: "+str(d_not_p)+" has detected events but not predicted events")
    p_not_d = set(predicted_events.keys()) - set(detected_events.keys())
    if len(p_not_d)>0:
      print("WARNING: "+str(p_not_d)+" has predicted events but not detected events")

  for wavfile in detected_events.keys():
    start_times, stop_times, ifeature = combine_events(
          detected_events[wavfile], predicted_events[wavfile],
          lambda x,y: np.logical_and(x, np.logical_not(y)))

    basepath = os.path.dirname(csv_files[0])
    filename = os.path.join(basepath, wavfile+'-missed.csv')
    with open(filename,'w') as fid:
      csvwriter = csv.writer(fid, lineterminator='\n')
      csvwriter.writerows(zip(cycle([wavfile]), \
                              start_times[:ifeature], stop_times[:ifeature], \
                              cycle(['missed']), cycle(['other'])))

except Exception as e:
  print(e)

finally:
  if hasattr(os, 'sync'):
    os.sync()
  print(str(datetime.now())+": finish time")
