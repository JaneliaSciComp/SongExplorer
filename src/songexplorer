#!/usr/bin/env python3

# launch the graphical user interface
 
# songexplorer <configuration-file> <port>
# http://<hostname>:<port>/gui

# e.g.
# $SONGEXPLORER_BIN songexplorer `pwd`/configuration.py 5006

import os
import sys
import tensorflow as tf
import psutil
from subprocess import run, PIPE, DEVNULL
import socket

_, configuration_file, port = sys.argv

exec(open(configuration_file).read(), globals())

local_ncpu_cores = os.cpu_count()
local_ngpu_cards = len(tf.config.list_physical_devices("GPU"))
local_ngigabytes_memory = int(psutil.virtual_memory().total/1024/1024/1024)

print("detected "+str(local_ncpu_cores)+" local_ncpu_cores, "+
                  str(local_ngpu_cards)+" local_ngpu_cards, "+
                  str(local_ngigabytes_memory)+" local_ngigabytes_memory")

if server_ipaddr:
    p = run(["ssh", "-l", server_username, server_ipaddr,
             "python3 -c 'import os; print(os.cpu_count())'"], stdout=PIPE)
    server_ncpu_cores = int(p.stdout.decode('ascii').rstrip())
    p = run(["ssh", "-l", server_username, server_ipaddr, "\$SONGEXPLORER_BIN",
             "python3 -c 'import tensorflow; print(len(tensorflow.config.list_physical_devices(\"GPU\")))'"],
            stdout=PIPE)
    server_ngpu_cards = int(p.stdout.decode('ascii').rstrip())
    p = run(["ssh", "-l", server_username, server_ipaddr, "\$SONGEXPLORER_BIN",
             "python3 -c 'import psutil; print(int(psutil.virtual_memory().total/1024/1024/1024))'"],
            stdout=PIPE)
    server_ngigabytes_memory = int(p.stdout.decode('ascii').rstrip())

    print("detected "+str(server_ncpu_cores)+" server_ncpu_cores, "+
                      str(server_ngpu_cards)+" server_ngpu_cards, "+
                      str(server_ngigabytes_memory)+" server_ngigabytes_memory")

def isinteger(x):
    if eval("not isinstance("+x+", int)"):
        print("ERROR: "+x+" is not an integer")

isinteger("audio_tic_rate")
isinteger("audio_nchannels")
isinteger("gui_snippets_width_ms")
isinteger("gui_snippets_nx")
isinteger("gui_snippets_ny")
isinteger("gui_nlabels")
isinteger("gui_gui_width_pix")
isinteger("gui_context_width_ms")
isinteger("gui_context_offset_ms")
isinteger("gui_context_waveform_height_pix")
isinteger("gui_context_spectrogram_height_pix")
isinteger("models_per_job")
isinteger("pca_batch_size")
isinteger("nprobabilities")
isinteger("detect_ncpu_cores")
isinteger("detect_ngpu_cards")
isinteger("detect_ngigabytes_memory")
isinteger("misses_ncpu_cores")
isinteger("misses_ngpu_cards")
isinteger("misses_ngigabytes_memory")
isinteger("train_gpu_ncpu_cores")
isinteger("train_gpu_ngpu_cards")
isinteger("train_gpu_ngigabytes_memory")
isinteger("train_cpu_ncpu_cores")
isinteger("train_cpu_ngpu_cards")
isinteger("train_cpu_ngigabytes_memory")
isinteger("generalize_gpu_ncpu_cores")
isinteger("generalize_gpu_ngpu_cards")
isinteger("generalize_gpu_ngigabytes_memory")
isinteger("generalize_cpu_ncpu_cores")
isinteger("generalize_cpu_ngpu_cards")
isinteger("generalize_cpu_ngigabytes_memory")
isinteger("xvalidate_gpu_ncpu_cores")
isinteger("xvalidate_gpu_ngpu_cards")
isinteger("xvalidate_gpu_ngigabytes_memory")
isinteger("xvalidate_cpu_ncpu_cores")
isinteger("xvalidate_cpu_ngpu_cards")
isinteger("xvalidate_cpu_ngigabytes_memory")
isinteger("mistakes_ncpu_cores")
isinteger("mistakes_ngpu_cards")
isinteger("mistakes_ngigabytes_memory")
isinteger("activations_gpu_ncpu_cores")
isinteger("activations_gpu_ngpu_cards")
isinteger("activations_gpu_ngigabytes_memory")
isinteger("activations_cpu_ncpu_cores")
isinteger("activations_cpu_ngpu_cards")
isinteger("activations_cpu_ngigabytes_memory")
isinteger("cluster_ncpu_cores")
isinteger("cluster_ngpu_cards")
isinteger("cluster_ngigabytes_memory")
isinteger("accuracy_ncpu_cores")
isinteger("accuracy_ngpu_cards")
isinteger("accuracy_ngigabytes_memory")
isinteger("freeze_ncpu_cores")
isinteger("freeze_ngpu_cards")
isinteger("freeze_ngigabytes_memory")
isinteger("classify_gpu_ncpu_cores")
isinteger("classify_gpu_ngpu_cards")
isinteger("classify_gpu_ngigabytes_memory")
isinteger("classify_cpu_ncpu_cores")
isinteger("classify_cpu_ngpu_cards")
isinteger("classify_cpu_ngigabytes_memory")
isinteger("ethogram_ncpu_cores")
isinteger("ethogram_ngpu_cards")
isinteger("ethogram_ngigabytes_memory")
isinteger("compare_ncpu_cores")
isinteger("compare_ngpu_cards")
isinteger("compare_ngigabytes_memory")
isinteger("congruence_ncpu_cores")
isinteger("congruence_ngpu_cards")
isinteger("congruence_ngigabytes_memory")
isinteger("accuracy_parallelize")
isinteger("cluster_parallelize")
isinteger("congruence_parallelize")
isinteger("classify_parallelize")

def isbinary(x):
    if eval(x+"!=0 and "+x+"!=1"):
        print("ERROR: "+x+" is not binary")

isbinary("activations_gpu")
isbinary("classify_gpu")
isbinary("generalize_gpu")
isbinary("train_gpu")
isbinary("xvalidate_gpu")

if gui_context_spectrogram_units != "mHz" and gui_context_spectrogram_units != "Hz" and gui_context_spectrogram_units != "kHz" and gui_context_spectrogram_units != "MHz":
    print("WARNING: gui_context_spectrogram_units should be mHz, Hz, kHz, or MHz")

global_vars = globals().copy()
for resource_kind in ["ncpu_cores", "ngpu_cards", "ngigabytes_memory"]:
    for job_resource_name in filter(lambda x: resource_kind in x, global_vars.keys()):
        if "local_" in job_resource_name or "server_" in job_resource_name:  continue
        job_resource_value = global_vars[job_resource_name]
        local_resource_name = "local_"+resource_kind
        local_resource_value = global_vars[local_resource_name]
        if job_resource_value > local_resource_value:
              print("WARNING: "+job_resource_name+" exceeds "+
                    str(local_resource_value)+" "+local_resource_name)
        if server_ipaddr:
            server_resource_name = "server_"+resource_kind
            server_resource_value = global_vars[server_resource_name]
            if job_resource_value > server_resource_value:
                  print("WARNING: "+job_resource_name+" exceeds "+
                        str(server_resource_value)+" "+server_resource_name)


repodir = os.path.dirname(os.path.dirname(os.path.realpath(__file__)))
with open(os.path.join(repodir,"VERSION.txt"), 'r') as fid:
    version = fid.read().replace('\n', ' ')
print("SongExplorer version: "+version)
allow_websockets=["localhost:"+port]
ipaddr="noIPv4s"

thisip = socket.gethostbyname(socket.gethostname())
allow_websockets.append(thisip+":"+port)
ipaddr=thisip

thisip = socket.gethostname()
allow_websockets.append(thisip+":"+port)
ipaddr=thisip

print(ipaddr+":"+port)


p = run(["hnslots"], stdout=PIPE, stderr=DEVNULL)
if p.returncode==1:
    run(["hstart",
          str(local_ncpu_cores)+','+str(local_ngpu_cards)+','+str(local_ngigabytes_memory)])
else:
    nslots = [int(x) for x in p.stdout.decode('ascii').rstrip().split(',')]
    if nslots != [local_ncpu_cores, local_ngpu_cards, local_ngigabytes_memory]:
        print("WARNING: SongExplorer's scheduler is already running with local_ncpu_cores, local_ngpu_cards, and local_ngigabytes_memory set to "+str(nslots)+" respectively, which is different than specified in the configuration file.  To use the latter instead, quit SongExplorer, execute `$SONGEXPLORER_BIN hstop`, and restart SongExplorer.")

if server_ipaddr:
    p = Popen(["ssh", "-l", server_username, server_ipaddr,
               "export SINGULARITYENV_PREPEND_PATH="+source_path+";",
               "$SONGEXPLORER_BIN", "hnslots"], stdout=PIPE, stderr=DEVNULL)
    if p.returncode==1:
        Popen(["ssh", "-l", server_username, server_ipaddr,
               "export SINGULARITYENV_PREPEND_PATH="+source_path+";",
               "$SONGEXPLORER_BIN", "hstart",
               str(server_ncpu_cores)+','+str(server_ngpu_cards)+','+str(server_ngigabytes_memory)])
    else:
        nslots = [int(x) for x in p.stdout.decode('ascii').rstrip().split(',')]
        if nslots != [server_ncpu_cores, server_ngpu_cards, server_ngigabytes_memory]:
            print("WARNING: SongExplorer's scheduler is already running with server_ncpu_cores, server_ngpu_cards, and server_ngigabytes_memory set to "+str(nslots)+" respectively, which is different than specified in the configuration file.  To use the latter instead, quit SongExplorer, execute `ssh -l "+server_username+" "+server_ipaddr+" $SONGEXPLORER_BIN hstop`, and restart SongExplorer.")

try:
    run(["bokeh", "serve", \
         *[x for y in [["--allow-websocket-origin", x] for x in allow_websockets] for x in y],
          "--show", os.path.join(repodir, "src", "gui"), \
          "--port", port, \
          "--args", version, \
      configuration_file])

except KeyboardInterrupt:
    p = run(["hjobs"], stdout=PIPE, stderr=DEVNULL)
    if len(p.stdout.decode('ascii').splitlines()) - 1 > 0:
        print("WARNING: jobs are still queued locally; to kill them execute `$SONGEXPLORER_BIN hstop --force`; to stop SongExplorer's scheduler, wait until they are done and execute `$SONGEXPLORER_BIN hstop`")
    else:
        run(["hstop"])
    if server_ipaddr:
        p = Popen(["ssh", "-l", server_username, server_ipaddr,
                   "export SINGULARITYENV_PREPEND_PATH="+source_path+";",
                   "$SONGEXPLORER_BIN", "hjobs"], stdout=PIPE, stderr=DEVNULL)
        if len(p.stdout.decode('ascii').splitlines()) - 1 > 0:
            print("WARNING: jobs are still queued on the server; to kill them execute `ssh -l "+server_username+" "+server_ipaddr+" $SONGEXPLORER_BIN hstop --force`; to stop SongExplorer's scheduler, wait until they are done and execute `ssh -l "+server_username+" "+server_ipaddr+" $SONGEXPLORER_BIN $SONGEXPLORER_BIN hstop`")
        else:
            Popen(["ssh", "-l", server_username, server_ipaddr,
                   "export SINGULARITYENV_PREPEND_PATH="+source_path+";",
                   "$SONGEXPLORER_BIN", "hstop"])
