#!/usr/bin/env bash

# launch the graphical user interface
 
# songexplorer <configuration-file> <port>
# http://<hostname>:<port>/gui

# e.g.
# $SONGEXPLORER_BIN songexplorer `pwd`/configuration.pysh 5006

configuration_file=$1
port=$2

source $configuration_file

DIR="$( cd "$( dirname "$(readlink -f ${BASH_SOURCE[0]})" )" >/dev/null 2>&1 && pwd )"

readarray pyout < <(python3 - <<DONE
import os
import sys
import tensorflow as tf
import psutil
from subprocess import run, PIPE, Popen
import socket

exec(open("$configuration_file").read(), globals())

local_ncpu_cores = os.cpu_count()
local_ngpu_cards = len(tf.config.list_physical_devices("GPU"))
local_ngigabytes_memory = int(psutil.virtual_memory().total/1024/1024/1024)

print("detected "+str(local_ncpu_cores)+" local_ncpu_cores, "+
                  str(local_ngpu_cards)+" local_ngpu_cards, "+
                  str(local_ngigabytes_memory)+" local_ngigabytes_memory")

if server_ipaddr:
    p = run(["ssh", "-l", server_username, server_ipaddr,
             "python3 -c 'import os; print(os.cpu_count())'"], stdout=PIPE)
    server_ncpu_cores = int(p.stdout.decode('ascii').rstrip())
    p = run(["ssh", "-l", server_username, server_ipaddr, "\$SONGEXPLORER_BIN",
             "python3 -c 'import tensorflow; print(len(tensorflow.config.list_physical_devices(\"GPU\")))'"],
            stdout=PIPE)
    server_ngpu_cards = int(p.stdout.decode('ascii').rstrip())
    p = run(["ssh", "-l", server_username, server_ipaddr, "\$SONGEXPLORER_BIN",
             "python3 -c 'import psutil; print(int(psutil.virtual_memory().total/1024/1024/1024))'"],
            stdout=PIPE)
    server_ngigabytes_memory = int(p.stdout.decode('ascii').rstrip())

    print("detected "+str(server_ncpu_cores)+" server_ncpu_cores, "+
                      str(server_ngpu_cards)+" server_ngpu_cards, "+
                      str(server_ngigabytes_memory)+" server_ngigabytes_memory")

def isinteger(x):
    if eval("not isinstance("+x+", int)"):
        print("ERROR: "+x+" is not an integer")

isinteger("audio_tic_rate")
isinteger("audio_nchannels")
isinteger("gui_snippets_width_ms")
isinteger("gui_snippets_nx")
isinteger("gui_snippets_ny")
isinteger("gui_nlabels")
isinteger("gui_gui_width_pix")
isinteger("gui_context_width_ms")
isinteger("gui_context_offset_ms")
isinteger("gui_context_waveform_height_pix")
isinteger("gui_context_spectrogram_height_pix")
isinteger("models_per_job")
isinteger("pca_batch_size")
isinteger("nprobabilities")
isinteger("detect_ncpu_cores")
isinteger("detect_ngpu_cards")
isinteger("detect_ngigabytes_memory")
isinteger("misses_ncpu_cores")
isinteger("misses_ngpu_cards")
isinteger("misses_ngigabytes_memory")
isinteger("train_gpu_ncpu_cores")
isinteger("train_gpu_ngpu_cards")
isinteger("train_gpu_ngigabytes_memory")
isinteger("train_cpu_ncpu_cores")
isinteger("train_cpu_ngpu_cards")
isinteger("train_cpu_ngigabytes_memory")
isinteger("generalize_gpu_ncpu_cores")
isinteger("generalize_gpu_ngpu_cards")
isinteger("generalize_gpu_ngigabytes_memory")
isinteger("generalize_cpu_ncpu_cores")
isinteger("generalize_cpu_ngpu_cards")
isinteger("generalize_cpu_ngigabytes_memory")
isinteger("xvalidate_gpu_ncpu_cores")
isinteger("xvalidate_gpu_ngpu_cards")
isinteger("xvalidate_gpu_ngigabytes_memory")
isinteger("xvalidate_cpu_ncpu_cores")
isinteger("xvalidate_cpu_ngpu_cards")
isinteger("xvalidate_cpu_ngigabytes_memory")
isinteger("mistakes_ncpu_cores")
isinteger("mistakes_ngpu_cards")
isinteger("mistakes_ngigabytes_memory")
isinteger("activations_gpu_ncpu_cores")
isinteger("activations_gpu_ngpu_cards")
isinteger("activations_gpu_ngigabytes_memory")
isinteger("activations_cpu_ncpu_cores")
isinteger("activations_cpu_ngpu_cards")
isinteger("activations_cpu_ngigabytes_memory")
isinteger("cluster_ncpu_cores")
isinteger("cluster_ngpu_cards")
isinteger("cluster_ngigabytes_memory")
isinteger("accuracy_ncpu_cores")
isinteger("accuracy_ngpu_cards")
isinteger("accuracy_ngigabytes_memory")
isinteger("freeze_ncpu_cores")
isinteger("freeze_ngpu_cards")
isinteger("freeze_ngigabytes_memory")
isinteger("classify_gpu_ncpu_cores")
isinteger("classify_gpu_ngpu_cards")
isinteger("classify_gpu_ngigabytes_memory")
isinteger("classify_cpu_ncpu_cores")
isinteger("classify_cpu_ngpu_cards")
isinteger("classify_cpu_ngigabytes_memory")
isinteger("ethogram_ncpu_cores")
isinteger("ethogram_ngpu_cards")
isinteger("ethogram_ngigabytes_memory")
isinteger("compare_ncpu_cores")
isinteger("compare_ngpu_cards")
isinteger("compare_ngigabytes_memory")
isinteger("congruence_ncpu_cores")
isinteger("congruence_ngpu_cards")
isinteger("congruence_ngigabytes_memory")
isinteger("accuracy_parallelize")
isinteger("cluster_parallelize")
isinteger("congruence_parallelize")
isinteger("classify_parallelize")

def isbinary(x):
    if eval(x+"!=0 and "+x+"!=1"):
        print("ERROR: "+x+" is not binary")

isbinary("activations_gpu")
isbinary("classify_gpu")
isbinary("generalize_gpu")
isbinary("train_gpu")
isbinary("xvalidate_gpu")

if gui_context_spectrogram_units != "mHz" and gui_context_spectrogram_units != "Hz" and gui_context_spectrogram_units != "kHz" and gui_context_spectrogram_units != "MHz":
    print("WARNING: gui_context_spectrogram_units should be mHz, Hz, kHz, or MHz")

global_vars = globals().copy()
for resource_kind in ["ncpu_cores", "ngpu_cards", "ngigabytes_memory"]:
    for job_resource_name in filter(lambda x: resource_kind in x, global_vars.keys()):
        if "local_" in job_resource_name or "server_" in job_resource_name:  continue
        job_resource_value = global_vars[job_resource_name]
        local_resource_name = "local_"+resource_kind
        local_resource_value = global_vars[local_resource_name]
        if job_resource_value > local_resource_value:
              print("WARNING: "+job_resource_name+" exceeds "+
                    str(local_resource_value)+" "+local_resource_name)
        if server_ipaddr:
            server_resource_name = "server_"+resource_kind
            server_resource_value = global_vars[server_resource_name]
            if job_resource_value > server_resource_value:
                  print("WARNING: "+job_resource_name+" exceeds "+
                        str(server_resource_value)+" "+server_resource_name)


with open(os.path.join("$DIR","..","VERSION.txt"), 'r') as fid:
    version = fid.read().replace('\n', ' ')
print("SongExplorer version: "+version)

allow_websocket="--allow-websocket-origin=localhost:$port"
ipaddr="noIPv4s"

thisip = socket.gethostbyname(socket.gethostname())
allow_websocket += " --allow-websocket-origin="+thisip+":$port"
ipaddr=thisip

thisip = socket.gethostname()
allow_websocket += " --allow-websocket-origin="+thisip+":$port"
ipaddr=thisip

print(ipaddr+":$port")

print(allow_websocket)
DONE
)

for x in "${pyout[@]}"; do
    if [[ "$x" =~ allow-websocket-origin.* ]] ; then
        allow_websocket=$x
    elif [[ "$x" =~ detected.*local.* ]] ; then
        local_ncpu_cores=${x% local_ncpu_cores*}
        local_ncpu_cores=${local_ncpu_cores##* }
        local_ngpu_cards=${x% local_ngpu_cards*}
        local_ngpu_cards=${local_ngpu_cards##* }
        local_ngigabytes_memory=${x% local_ngigabytes_memory*}
        local_ngigabytes_memory=${local_ngigabytes_memory##* }
        echo $x
    elif [[ "$x" =~ detected.*server* ]] ; then
        server_ncpu_cores=${x% server_ncpu_cores*}
        server_ncpu_cores=${server_ncpu_cores##* }
        server_ngpu_cards=${x% server_ngpu_cards*}
        server_ngpu_cards=${server_ngpu_cards##* }
        server_ngigabytes_memory=${x% server_ngigabytes_memory*}
        server_ngigabytes_memory=${server_ngigabytes_memory##* }
        echo $x
    fi
done

trap "trap \"\" INT TERM KILL STOP HUP; \
      local_njobs=\`hjobs | wc -l\`; \
      if [[ \\\$\? && (( \"\$local_njobs\" > 1 )) ]] ; then \
          echo WARNING: jobs are still queued locally; \
          echo to kill them execute \\\`\\\$SONGEXPLORER_BIN hstop --force\\\`; \
          echo to stop SongExplorer\'s scheduler, wait until they are done and execute \\\`\\\$SONGEXPLORER_BIN hstop\\\`; \
      else \
          hstop; \
      fi; \
      if [[ -n \"$server_ipaddr\" ]] ; then \
        server_njobs=\`ssh -l $server_username $server_ipaddr \"export SINGULARITYENV_PREPEND_PATH=$source_path; \\\\\\\$SONGEXPLORER_BIN hjobs | wc -l\"\`; \
        if [[ \\\$\? && (( \"\$server_njobs\" > 1 )) ]] ; then \
            echo WARNING: jobs are still queued on the server; \
            echo to kill them execute \\\`ssh -l $server_username $server_ipaddr \\\$SONGEXPLORER_BIN hstop --force\\\`; \
            echo to stop SongExplorer\'s scheduler, wait until they are done and execute \\\`ssh -l $server_username $server_ipaddr \\\$SONGEXPLORER_BIN hstop\\\`; \
        else \
            ssh -l $server_username $server_ipaddr \"export SINGULARITYENV_PREPEND_PATH=$source_path; \\\$SONGEXPLORER_BIN hstop\"; \
        fi; \
      fi" INT TERM KILL STOP HUP

aitch_nslots=`hnslots 2>/dev/null`
aitch_isrunning=$?
if [[ "$aitch_isrunning" != 0 ]] ; then
    hstart $local_ncpu_cores,$local_ngpu_cards,$local_ngigabytes_memory >/dev/null
elif [[ "$aitch_nslots" != "$local_ncpu_cores,$local_ngpu_cards,$local_ngigabytes_memory" ]] ; then

    echo WARNING: SongExplorer\'s scheduler is already running with local_ncpu_cores,
    echo local_ngpu_cards, and local_ngigabytes_memory set to ${aitch_nslots//,/ },
    echo respectively, which is different than specified in the configuration
    echo file.  To use the latter instead, quit SongExplorer, execute
    echo \`\$SONGEXPLORER_BIN hstop\`, and restart SongExplorer.
fi

if [[ -n "$server_ipaddr" ]] ; then
    aitch_nslots=`ssh -l $server_username $server_ipaddr "export SINGULARITYENV_PREPEND_PATH=$source_path; \\\$SONGEXPLORER_BIN hnslots 2>/dev/null"`
    aitch_isrunning=$?
    if [[ "$aitch_isrunning" != 0 ]] ; then
        ssh -l $server_username $server_ipaddr "export SINGULARITYENV_PREPEND_PATH=$source_path; \$SONGEXPLORER_BIN hstart \
                $server_ncpu_cores,$server_ngpu_cards,$server_ngigabytes_memory >/dev/null" &
    elif [[ "$aitch_nslots" != "$server_ncpu_cores,$server_ngpu_cards,$server_ngigabytes_memory" ]] ; then

        echo WARNING: SongExplorer\'s scheduler is already running on
        echo $server_ipaddr with server_ncpu_cores, server_ngpu_cards, and
        echo server_ngigabytes_memory set to ${aitch_nslots//,/ }, respectively, which
        echo is different than specified in the configuration file.  To use
        echo the latter instead, quit SongExplorer, execute \`ssh -l $server_username
        echo $server_ipaddr \$SONGEXPLORER_BIN hstop\`, and restart SongExplorer.

    fi
fi

bokeh serve \
      $allow_websocket \
      --show $DIR/gui \
      --port $port \
      --args "$(cat $DIR/../VERSION.txt)" $configuration_file
